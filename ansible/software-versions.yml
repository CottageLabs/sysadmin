---
- name: Get software versions
  hosts: all
  tasks:
    - name: Get Ubuntu version
      command: lsb_release -d
      register: ubuntu_version
      changed_when: false
      ignore_errors: true
      when: "'ubuntu' in ansible_distribution|lower"

    - name: Set Ubuntu version message
      set_fact:
        ubuntu_msg: "Ubuntu Version: {{ ubuntu_version.stdout | regex_search('(?<=Ubuntu\\s).+') }}"
      when: ubuntu_version is defined and 'stdout' in ubuntu_version

    - name: Get Python version
      command: python3 --version
      register: python_version
      changed_when: false
      ignore_errors: true

    - name: Set Python version message
      set_fact:
        pyhon_msg: "Python Version: {{ python_version.stdout }}"
      when: python_version is defined and 'stdout' in python_version

    - name: Get Java version
      shell:
        cmd: java -version 2>&1 | grep 'version'
      register: java_version
      changed_when: false
      ignore_errors: true

    - name: Set Java version message
      set_fact:
        java_msg: "Java Version: {{ java_version.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+(_[0-9]+)?)') }}"
      when: java_version is defined and 'stdout' in java_version

    - name: Get Metricbeat version
      command: metricbeat version
      register: metricbeat_version
      changed_when: false
      ignore_errors: true
      when: "'test' not in group_names"

    - name: Set Metricbeat version message
      set_fact:
        metricbeat_msg: "Metricbeat Version: {{ metricbeat_version.stdout }}"
      when: metricbeat_version is defined and 'stdout' in metricbeat_version

    - name: Get Elasticsearch version
      uri:
        url: http://10.131.191.132:9200/
        method: GET
        return_content: yes
      when: "'index' in group_names"
      register: elasticsearch_version
      changed_when: false
      ignore_errors: true
      tags:
        - get_es_version

    - name: Set Elasticsearch version message
      set_fact:
        elasticsearch_msg: "Elasticsearch Version: {{ elasticsearch_version.json.version.number }}"
      when: elasticsearch_version is defined and 'json' in elasticsearch_version

    - name: Get Local Elasticsearch version
      uri:
        url: http://localhost:9200/
        method: GET
        return_content: yes
      when: "'monitor' in group_names or 'test' in group_names"
      register: local_elasticsearch_version
      changed_when: false
      ignore_errors: true
      tags:
        - get_es_version

    - name: Set Local Elasticsearch version message
      set_fact:
        local_elasticsearch_msg: "Elasticsearch Version: {{ local_elasticsearch_version.json.version.number }}"
      when: local_elasticsearch_version is defined and 'json' in local_elasticsearch_version

    - name: Get Kibana version
      uri:
        url: "http://localhost:5601/api/status"
        method: GET
        return_content: yes
        headers:
          kbn-xsrf: "true"
      when: "'monitor' in group_names"
      register: kibana_version
      changed_when: false
      ignore_errors: true

    - name: Set Kibana version message
      set_fact:
        kibana_msg: "Kibana Version: {{ kibana_version.json.version.number }}"
      when: kibana_version is defined and 'json' in kibana_version

    - name: Get Logstash version
      command: /usr/share/logstash/bin/logstash --version
      when: "'monitor' in group_names"
      register: logstash_version
      changed_when: false
      ignore_errors: true

    - name: Set Logstash version message
      set_fact:
        logstash_msg: "Logstash Version: {{ logstash_version.stdout }}"
      when: logstash_version is defined and 'stdout' in logstash_version

    - name: Get Redis version
      command: redis-server --version
      when: "'background' in inventory_hostname or 'test' in group_names"
      register: redis_version
      changed_when: false
      ignore_errors: true

    - name: Set Redis version message
      set_fact:
        redis_msg: "Redis Version: {{ redis_version.stdout }}"
      when: redis_version is defined and 'stdout' in redis_version

    - name: Get Kafka version
      shell: ls /opt/kafka/libs | grep kafka-
      when: "'kafka' in group_names"
      register: kafka_version
      changed_when: false
      ignore_errors: true
      tags:
        - get_kafka_version

    - name: Set Kafka version message
      set_fact:
        kafka_msg: "Kafka Version: {{ kafka_version.stdout }}"
      when: kafka_version is defined and 'stdout' in kafka_version

    - name: Get nginx version
      command: nginx -v
      when: "'index' not in group_names"
      register: nginx_version
      changed_when: false
      ignore_errors: true

    - name: Set Nginx version message
      set_fact:
        nginx_msg: "Nginx Version: {{ nginx_version.stderr }}"
      when: nginx_version is defined and 'stdout' in nginx_version

    - name: Get LibXML version
      command:
        cmd: xml2-config --version
      when: "'monitor' not in group_names"
      register: libxml_version
      changed_when: false
      ignore_errors: true
      tags:
        - get_libxml_version

    - name: Set Libxml version message
      set_fact:
        libxml_msg: "Libxml Version: {{ libxml_version.stdout }}"
      when: libxml_version is defined and 'stdout' in libxml_version

    - name: Collect all messages
      set_fact:
        messages: "{{ [ubuntu_msg|default(''), pyhon_msg|default(''), java_msg|default(''), metricbeat_msg|default(''), elasticsearch_msg|default(''),
        local_elasticsearch_msg|default(''), kibana_msg|default(''), logstash_msg|default(''), redis_msg|default(''), kafka_msg|default(''),
        nginx_msg|default(''), libxml_msg|default('')] | select('ne', '') | list }}"

    - name: Display gathered versions
      debug:
        msg: "{{ messages }}"

- hosts: localhost
  vars:
    pycountry_dir: "{{ ansible_env.PWD }}/pycountry"
  tasks:
    - name: Clone the repository
      git:
        repo: 'https://github.com/DOAJ/pycountry.git'
        dest: '{{ pycountry_dir }}'
      register: git_result

    - name: Read the content of the file
      command: "cat {{ pycountry_dir }}/generate.py"
      register: file_content

    - name: Filter and display lines starting with specific text
      set_fact:
        debian_iso_list_version: "{{ (file_content.stdout_lines | select('match', '^REVISION.*$') | list | first) | regex_search('REVISION\\s*=\\s*\"([^\"]+)\"', '\\1') }}"

    - name: Delete the cloned directory
      file:
        path: "{{ pycountry_dir }}"
        state: absent

    - name: Set debian iso list version message
      set_fact:
        debian_iso_list_msg: "Debian ISO list Version: {{ debian_iso_list_version }}"
      when: debian_iso_list_version is defined

    - name: Set Ansible version message
      set_fact:
        ansible_msg: "Ansible Version: {{ ansible_version.full }}"
      when: ansible_version is defined

    - name: Collect all messages
      set_fact:
        messages: "{{ [debian_iso_list_msg|default(''), ansible_msg|default('')] }}"

    - name: Display gathered versions
      debug:
        msg: "{{ messages }}"
