## command using IP address -
# ansible-playbook -i 192.168.1.100, server_initial_setup.yml --e "server_name=test1 install_es=true git_branch=feature/form_experiment
#      ansible_user=cloo aws_profile=doaj-test-upload aws_access_key=key aws_secret_key=key
#      aws_secret_id=doaj/test-credentials" --private-key=~/.ssh/id_rsa -vv
## command using a specific host or group from your inventory.
# ansible-playbook -i doaj-hosts.ini server_initial_setup.yml --limit "hostname_or_ip" -e "git_branch=feature/new-feature"

---
- name: Setup VM for DOAJ application
  hosts: doaj-background-1
  gather_facts: yes

  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    install_es: false
    git_branch: "develop" # or "master" or provide at runtime with -e git_branch=...
    repo_url: "https://github.com/DOAJ/doaj.git"
    venv_path: "/home/{{ ansible_user }}/doaj/venv"
    destination: "/home/{{ ansible_user }}/doaj"
    deploy_env: production
    domain_name: 'doaj.org'
    app_supervisor_tasks:
        - doaj
    background_supervisor_tasks:
        - huey-long-running
        - huey-main
        - huey-events
        - huey-scheduled-long
        - huey-scheduled-short

  tasks:

    - name: Summarise actions
      debug:
        msg: "Deploying branch {{ git_branch }} on host {{ inventory_hostname }}"

    - name: Ensure Python3, supervisor, and Git are installed
      apt:
        name:
          - python3
          - python3-venv
          - git
          - supervisor
        state: present
        update_cache: yes
      become: yes

    - name: Ensure Redis is installed
      apt:
        name:
          - redis
        state: present
        update_cache: yes
      become: yes
      when: "'background' in group_names"

    - name: Clone git repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ destination }}"
        version: "{{ git_branch }}"
        clone: yes
        force: yes
      register: git_result

    - name: Debug git clone result
      debug:
        var: git_result

    - name: Create a virtualenv with an up-to-date pip & awscli
      ansible.builtin.pip:
        name:
        - pip
        - awscli
        virtualenv: "{{ venv_path }}"
        state: latest

    - name: Ensure ~/.aws directory exists
      file:
        path: "/home/{{ ansible_user }}/.aws"
        state: directory
        mode: '0700'

    - name: Ensure ~/.appdata directory exists
      file:
        path: "/home/{{ ansible_user }}/appdata/doaj/{{ item }}"
        state: directory
        mode: '0700'
      loop:
        - ga_logs
        - history
        - local_store
        - upload
        - failed_articles
        - cache

    - name: Check if nginx file exists in logrotate
      stat:
        path: /etc/logrotate.d/nginx
      register: nginx_file

    - name: Disable nginx in logrotate
      become: true
      command: mv /etc/logrotate.d/nginx /etc/logrotate.d/nginx.disabled
      when: nginx_file.stat.exists

    - name: Copy logrotate config files
      become: true
      command: cp {{ destination }}/deploy/logrotate/{{deploy_env}}/doaj-nginx /etc/logrotate.d/doaj-nginx

    - name: Copy logrotate config files
      become: true
      command: cp {{ destination }}/deploy/logrotate/doaj-analytics /etc/logrotate.d/doaj-analytics

    - name: Create symlink from our code to nginx sites-available
      become: yes
      ansible.builtin.file:
        src: "{{ destination }}/deploy/nginx/{{deploy_env}}/doaj"
        dest: /etc/nginx/sites-available/{{ domain_name }}
        state: link

    - name: Create symlink for nginx sites-enabled
      become: yes
      ansible.builtin.file:
        src: /etc/nginx/sites-available/{{ domain_name }}
        dest: /etc/nginx/sites-enabled/{{ domain_name }}
        state: link

    - name: Create symlink for nginx redirects
      become: yes
      ansible.builtin.file:
        src: "{{ destination }}/deploy/nginx/doaj-redirects.map"
        dest: /etc/nginx/doaj-redirects.map
        state: link

    - name: Add www-data user to the user group
      ansible.builtin.user:
        name: www-data
        groups:
          - "{{ ansible_user }}"
        append: yes
      become: yes

    - name: Create DOAJ app symlinks for supervisor
      ansible.builtin.file:
        src: "{{ destination }}/deploy/supervisor/{{ deploy_env }}/{{ item + '.conf'}}"
        dest: /etc/supervisor/conf.d/{{ item + '.conf' }}
        state: link
      loop: "{{ app_supervisor_tasks }}"
      become: yes
      when: "'app' in group_names"

    - name: Create background symlinks for supervisor
      ansible.builtin.file:
        src: "{{ destination }}/deploy/supervisor/{{ deploy_env }}-background/{{ item + '.conf'}}"
        dest: /etc/supervisor/conf.d/{{ item + '.conf' }}
        state: link
      loop: "{{ background_supervisor_tasks }}"
      become: yes
      when: "'background' in group_names"

    - name: Ensure supervisor knows about our tasks for app server
      community.general.supervisorctl:
        name: "{{ item }}"
        state: present
      loop: "{{ app_supervisor_tasks }}"
      become: yes
      when: "'app' in group_names"

    - name: Ensure supervisor knows about our tasks for app server
      community.general.supervisorctl:
        name: "{{ item }}"
        state: present
      loop: "{{ background_supervisor_tasks }}"
      become: yes
      when: "'background' in group_names or deploy_env == 'test'"

    - name: Call the install script deploy.sh to install the app
      shell: "{{ destination }}/deploy/deploy.sh {{ deploy_env }}"

# TODO a clever way of getting a valid SSL cert, rather than copying from old machines
# TODO enable metricbeat monitoring for Kibana